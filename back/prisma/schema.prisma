// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Unlike TypeORM where entities are created and set inside the modules, 
// Prisma handles everything from this file where the models are set


generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client" 

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id				Int				@id @default(autoincrement())

  createdAt	DateTime	@default(now())
  updatedAt	DateTime	@updatedAt

  email		 	String    @unique
	username	String?   
  hash			String?
	picture		String?

	gamesWon		Int?
	gamesLost		Int?
	gamesPlayed	Int?
//game history ? Une partie = 2 id, un score

	friends		User[]		@relation(name: "relationships")  //array of friends based on their id 
	blocked		User[]		@relation(name: "relationships")  // it's blocked or blocking

  admin       Channel[] @relation("admin")  // the following three line i dont understand well. 
  member      Channel[] @relation("member")
  chanBlocked Channel[] @relation("blocked")

  messages    Message[]

  @@unique([id, email])
  @@map("users")    //mapped to another name
}

model Channel {
  id    Int           @id  @default(autoincrement())

  name  String        @unique
  picture String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  private   Boolean   @default(false)
  password  String?

  admins    User[]    @relation("admin")
  members   User[]    @relation("member")
  blocked   User[]    @relation("blocked")
  messages  Message[]

  @@unique([id, name])
}

model Message {
  id    Int     @id  @default(autoincrement())

  msg  String
  history String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  owner     User      @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel   @relation(fields: [cid], references: [id])
  cid       Int

  @@unique([id])
}


// model Bookmark {
//   id Int @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   title String
//   description String?
//   link String

//   userId Int
//   user User @relation(fields: [userId], references: [id])   //sets ManyToOne logic

//   @@map("bookmark")
//   }


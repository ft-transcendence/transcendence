version: '3.8'

volumes:
  data:
  uploads:

networks:
  backend:

services:
# FRONTEND
  front:
    image: node:lts-alpine
    container_name: frontend
    working_dir: /app
    command: sh -c "yarn install 
                    && yarn run build
                    && yarn global add serve 
                    && serve -s build -l 3000"
    environment:
      - PUBLIC_URL=${FRONT_URL}
      - REACT_APP_BACKEND_URL=${BACK_URL}
      - REACT_APP_BACKEND_SOCKET=${SOCKET_URL}
    volumes:
      - ./front:/app
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - back
# BACKEND
  back:
    image: node:lts-alpine
    container_name: backend
    working_dir: /app
    command: sh -c "yarn install
                    && npx prisma migrate deploy
                    && yarn run start"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - SITE_URL=${SITE_URL}
      - FRONT_URL=${FRONT_URL}
      - BACK_URL=${BACK_URL}
      - FRONT_PORT=${FRONT_PORT}
      - BACK_PORT=${BACK_PORT}
    volumes:
      - ./back:/app
      - uploads:/app/image_dir
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - postgres
# POSTGRES
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: unless-stopped
    volumes:
      - data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - backend
# NGINX
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
##      - ./nginx/ssl-certs/cert.crt:/cert.crt
##      - ./nginx/ssl-certs/cert.key:/cert.key
    ports:
      - "80:80"
#    command: sh -c "tail -f /dev/null"
    restart: unless-stopped
    networks:
    - backend
    depends_on:
      - back

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Unlike TypeORM where entities are created and set inside the modules, 
// Prisma handles everything from this file where the models are set


generator client {
	provider = "prisma-client-js"
	// output   = "../node_modules/@prisma/client" 

}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id			Int			@id @default(autoincrement())
  id42    Int			@unique @default(0)

	createdAt	DateTime	@default(now())
	updatedAt	DateTime	@updatedAt

	email		String		@unique
	username	String?		@unique  
	hash		String
	avatar		String?

	hashedRtoken	String?
	twoFAsecret		String?
	twoFA			Boolean?	@default(false)

	gamesWon		Int     @default(0)
	gamesLost		Int     @default(0)
	gamesPlayed		Int     @default(0)
	gameHistory		Int[]
	

	winRate			Float?
	playTime		Int		@default(0)
	score			Int		@default(1200)
	rank			Int?

	friends		Int[]
	adding		Int[]	
	added		Int[]		

	blocks		Int[]
	blocking	Int[]
	blocked		Int[]

  owner       Channel[] @relation("owner")
  admin       Channel[] @relation("admin")
  member      Channel[] @relation("member")
  invited     Channel[] @relation("invite")
  chanBlocked Channel[] @relation("blocked")

  Muted       Mute[]

  messages    Msg[]

	@@unique([id, email])
	@@map("users")    //mapped to another name
}

model Channel {
  id          Int       @id  @default(autoincrement())

  name        String    @unique @default(uuid())
  picture     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  dm          Boolean   @default(false)
  private     Boolean   @default(false)
  isPassword  Boolean   @default(false)
  password    String?

  owners      User[]      @relation("owner")
  admins      User[]      @relation("admin")
  members     User[]      @relation("member")
  inviteds    User[]      @relation("invite")
  blocked     User[]      @relation("blocked")

  muted       Mute[]

  messages    Msg[]

	@@unique([id, name])
}

model Msg {
  id          Int     @id  @default(autoincrement())

  msg         String
  history     String[]

  unsent      Boolean   @default(false)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  owner       User      @relation(fields: [userId], references: [id])
  userId      Int
  channel     Channel   @relation(fields: [cid], references: [id])
  cid         Int
}

model Mute {
  id          Int       @id   @default(autoincrement())


  finishAt    DateTime
  checkAt     DateTime  @default(now())
  finished    Boolean   @default(false)

  muted       User      @relation(fields: [userId], references: [id])
  userId      Int
  channel     Channel   @relation(fields: [cid], references: [id])
  cid         Int
}

model Game {
	id	Int			@id @unique

	player1	Int
	player2 Int
	score1	Int
	score2	Int

	startTime	DateTime
	endTime		DateTime
	duration	Int? //in milliseconds


}